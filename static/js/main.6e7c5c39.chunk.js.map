{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LoadingDiv","styled","div","props","loaded","SideLoading","TopLoading","getRowHeight","Wrapper","LectureColors","StyledLecture","lectureId","StyledLectureBody","StyledLectureType","LightenDarkenColor","StyledLectureWrapper","SmallField","ErrorWrapper","ErrorCard","padTo2","num","slice","renderEvent","event","defaultAttributes","styles","className","title","name","key","id","type","style","fontWeight","professor","class","startTime","format","endTime","timeInterval","numberOfRows","round","App","useState","tableData","setTableData","error","setError","url","window","location","href","indexOf","split","useEffect","fetchPromise","fetch","method","mode","credentials","headers","referrerPolicy","then","response","ok","console","log","json","data","status","statusText","catch","e","tableDataConverted","monday","tuesday","wednesday","thursday","friday","DAYS","elementCount","forEach","d","lectures","el","predmet","abbr","push","dan","profesor","ucilnica","tip","moment","ura","trajanje","hoursInterval","events","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6e7c5c39.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {PuffLoader} from \"react-spinners\";\nimport styled from \"styled-components\";\nimport moment from 'moment';\nimport \"./App.css\";\n\nimport Timetable from 'react-timetable-events'\nimport round from 'lodash/round'\nimport { LightenDarkenColor } from 'lighten-darken-color'; \n\n\nconst LoadingDiv = styled.div`\n  width:100vw;\n  height:100vh;\n  display:flex;\n  position:absolute;\n  align-items:center;\n  justify-content:center;\n  background:white;\n\n  opacity:${props => props.loaded? 0 : 1};\n  transition: all .6s ;\n  transition-delay: .8s;\n\n  z-index:1000;\n`;\n\nconst SideLoading = styled.div`\n  background:#46596b;\n  width:${props => props.loaded? \"5rem\" : \"100vw\"};\n  transition: all .4s cubic-bezier(.25,.8,.25,1);\n  transition-delay: .4s;\n  \n  position:absolute;\n  left:0;\n  top:0;\n  height:100vh;\n  `;\n\nconst TopLoading = styled.div`\n  background:#34495d;\n  width:100vw;\n  position:absolute;\n  left:0;\n  top:0;\n\n  height:${props => props.loaded? `${getRowHeight()}vh` : \"100vh\"};\n  transition: all .4s cubic-bezier(.25,.8,.25,1);\n`;\n\n\nconst Wrapper = styled.div`\n  background:#34495d;\n  color:white;\n`;\n\nconst LectureColors = [\n  \"#e74c3c\",\n  \"#3498db\",\n  \"#2ecc71\",\n  \"#f1c40f\",\n  \"#9b59b6\",\n  \"#1abc9c\",\n  \"#e67e22\",\n  \"#34495e\"\n];\n\nconst StyledLecture = styled.div`\n  width:100%;\n  background:${props => LectureColors[props.lectureId]};\n  color:black;\n  display:flex;\n  flex-direction:row;\n  border-radius:2px;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n  text-shadow: -1px 1px 3px rgba(0, 0, 0, .3);\n  color: white;\n  transition: all 0.3s cubic-bezier(.25,.8,.25,1);\n  overflow:hidden;\n\n  margin:5px;\n\n  &:hover{\n    box-shadow: 0 10px 20px rgba(0,0,0,0.25), 0 6px 6px rgba(0,0,0,0.22);\n    margin:3px;\n  }\n`;\n\nconst StyledLectureBody = styled.div`\n  height:100%;\n  width:80%;\n  padding:10px;\n`;\n\nconst StyledLectureType = styled.div`\n  height:100%;\n  width:20%;\n  display:flex;\n  flex-direction:column;\n  justify-content:center;\n  align-items:center;\n  background: ${props => LightenDarkenColor(LectureColors[props.lectureId], -10)};\n  position:relative;\n`;\n\nconst StyledLectureWrapper = styled.div`\n  //padding:5px;\n  display:flex;\n  position:absolute;\n  box-sizing:border-box;\n  width:100%;\n`;\n\nconst SmallField = styled.div`\n  font-size:.6em;\n`;\n\nconst ErrorWrapper = styled.div`\n  width:100vw;\n  height:100vh;\n\n  display:flex;\n  justify-content:center;\n  align-items:center;\n`;\n\nconst ErrorCard = styled.div`\n  background:#e74c3c;\n  border-radius:2px;\n  padding:10px;\n`;\nconst padTo2 = (num) => ('00' + num).slice(-2) \n\nconst renderEvent = (event, defaultAttributes, styles) => {\n  defaultAttributes.className = \"\";\n  return (\n    <StyledLectureWrapper {...defaultAttributes}\n    title={event.name}\n    key={event.id}>\n      <StyledLecture lectureId={event.lectureId} type={event.type} >\n              <StyledLectureBody >\n                <div style={{fontWeight:`bold`}}>{ event.name }</div>\n                <SmallField>{event.professor}</SmallField>\n                <SmallField>{event.class}</SmallField>\n                <SmallField>\n                  { event.startTime.format('HH:mm') } - { event.endTime.format('HH:mm') }\n                </SmallField>\n             </StyledLectureBody>\n             <StyledLectureType type={event.type} lectureId={event.lectureId}>\n               {event.type}\n             </StyledLectureType>\n\n      </StyledLecture>\n    </StyledLectureWrapper>\n  )\n}\n\nfunction App() {\n  const [tableData, setTableData] = useState(false);\n  const [error, setError] = useState(false);\n  const url =\n    window.location.href.indexOf(\"?url=\") == -1\n      ? \"https://fmf-fri-timetable-scraper.herokuapp.com/getUrnik\"\n      : window.location.href.split(\"?url=\")[1];\n\n  useEffect(() => {\n    const fetchPromise = fetch(\"https://cors-anywhere.herokuapp.com/\" + url, {\n      method: 'GET',\n      mode: 'cors',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      referrerPolicy: 'no-referrer',\n    })\n    \n    fetchPromise.then(response => {\n      if(response.ok){\n        console.log(\"ok\");\n        response.json().then(data => {\n            setTableData(data);\n          })\n      }else{\n        console.log(\"not ok\", response)\n        setError(response.status + \": \" + response.statusText)\n      }\n        \n      })\n\n    fetchPromise.catch(e => {\n      setError(e);\n    })\n      \n  }, [])\n\n  const loaded = !!tableData;\n\n  const tableDataConverted = {\n      monday: [],\n      tuesday: [],\n      wednesday: [],\n      thursday: [],\n      friday: []\n    \n  };\n\n  const DAYS = [\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\"\n  ]\n\n  const elementCount = {};\n  DAYS.forEach(d => elementCount[d] = 1);\n\n  const lectures = [];\n  if(loaded && !error) \n    tableData.forEach(el => {\n      if(lectures.indexOf(el.predmet.abbr) == -1)\n        lectures.push(el.predmet.abbr);\n\n      tableDataConverted[DAYS[el.dan]].push({\n        id:elementCount[DAYS[el.dan]]++,\n        name:el.predmet.name,\n        professor: el.profesor,\n        class: el.ucilnica,\n        type:el.tip,\n        lectureId: lectures.indexOf(el.predmet.abbr),\n        startTime:moment(\"2019-02-23T\" + padTo2(el.ura) + \":00:00\"),\n        endTime:moment(\"2019-02-23T\" + ('00' + padTo2(el.ura + el.trajanje)).slice(-2) + \":00:00\")\n      })\n    })\n\n  console.log(error);\n    \n  return <Wrapper>\n    <LoadingDiv loaded={loaded || !!error}>\n      <SideLoading loaded={loaded}></SideLoading>\n      <TopLoading loaded={loaded}></TopLoading>\n      <PuffLoader  />\n    </LoadingDiv>\n    {error && <ErrorWrapper>\n      <ErrorCard>{error}</ErrorCard>\n      </ErrorWrapper>}\n    {loaded && <Timetable hoursInterval = {timeInterval} renderEvent={renderEvent} events={tableDataConverted}/>}\n  </Wrapper>;\n}\nconst timeInterval = [8, 20]\n\nconst getRowHeight = () => {\n  let numberOfRows =\n  timeInterval[1] - timeInterval[0] + 1\n\n  return round((100 / numberOfRows), 5)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}